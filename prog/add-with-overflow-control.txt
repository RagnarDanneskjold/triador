R1 NNN # NNN NNN # N.B. the memory is not guaranteed to be initialized
RR NNN # NNN NNO # initialize R13 with -13, this chooses segment NNN for jumps
R2 OPN # NNN NNP # write  2 to R2          * this program computes R2+R3
R3 PPP # NNN NON # write 13 to R3          * the result is stored in R3+R4*27
R4 OOO # NNN NOO # write  0 to R4
RR OPO # NNN NOP # copy R3 to R1 <─────────┐
SK NPO # NNN PON # skip if R2!=0           │
JP PPP # NNN POO # R2==0, terminate ─────┐ │
SK PNP # NNN POP # skip if R2>0          │ │
RR OON # NNN ONN # R1--                  │ │
SK PNN # NNN ONO # skip if R2<0          │ │
RR OOP # NNN ONP # R1++                  │ │
RR ONO # NNN OON # copy R1 to R3         │ │
R1 NNO # NNN OOO #                       │ │
RR NNN # NNN OOP # choose segment NNO    │ │
JP NNN # NNN OPN # subroutine call ──────│─│───┐
RR OPN # NNN OPO # copy R2 to R1         │ │   │<─┐
SK PNP # NNN OPP # skip if R2>0          │ │   │  │
RR OOP # NNN PNN # R1++                  │ │   │  │
SK PNN # NNN PNO # skip if R2<0          │ │   │  │
RR OON # NNN PNP # R1--                  │ │   │  │
RR ONP # NNN PON # copy R1 to R2         │ │   │  │
JP NOP # NNN POO # loop ─────────────────│─┘   │  │
RR OOO # NNN POP # do nothing            │     │  │
RR OOO # NNN PPN # do nothing            │     │  │
RR OOO # NNN PPO # do nothing            │     │  │
EX PPP # NNN PPP # halt and catch fire <─┘     │  │
SK PPO # NNO NNN # skip if R4==0 <─────────────┘  │
JP ONN # NNO NNO # already overflew ───────┐      │
SK OOO # NNO NNP # skip if C==0            │      │
JP NOP # NNO NON # C!=0 ──────────────┐    │      │
JP ONN # NNO NOO # C==0, sub return ──│┐   │      │
SK OOP # NNO NOP # skip if C==1 <─────┘│   │      │
R4 OON # NNO PON # write -1 to R4      │   │      │
SK OON # NNO POO # skip if C==-1       │   │      │
R4 OOP # NNO POP # write 1 to R4       │   │      │
R1 NNN # NNO ONN # <───────────────────┘<──┘      │
RR NNN # NNO ONO # choose segment NNN             │
JP OPO # NNO ONP # sub return ────────────────────┘
