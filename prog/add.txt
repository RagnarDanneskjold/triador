R1 NNN # NNN NNN # N.B. the memory is not guaranteed to be initialized
RR NNN # NNN NNO # initialize R13 with -13, this chooses segment NNN for jumps
R2 ONP # NNN NNP # write -2 to R2            ┌─────────────────────────────────┐
R3 PPP # NNN NON # write 13 to R3            │ This program computes R2+R3,    │
RR OPO # NNN NOO # copy R3 to R1 <─┐         │ the result is stored in R3.     │
SK NPO # NNN NOP # skip if R2!=0   │         │ Here is a C++ world equavalent: │
JP PNO # NNN PON # R2==0, terminate│ ────┐   │                                 │
SK PNP # NNN POO # skip if R2>0    │     │   │      int R2 = -2;               │
RR OON # NNN POP # R1--            │     │   │      int R3 = 13;               │
SK PNN # NNN ONN # skip if R2<0    │     │   │      while (R2!=0) {            │
RR OOP # NNN ONO # R1++            │     │   │          int R1 = R3;           │
RR ONO # NNN ONP # copy R1 to R3   │     │   │          if (R2>0) R1++;        │
RR OPN # NNN OON # copy R2 to R1   │     │   │          if (R2<0) R1--;        │
SK PNP # NNN OOO # skip if R2>0    │     │   │          R3 = R1;               │
RR OOP # NNN OOP # R1++            │     │   │          R1 = R2;               │
SK PNN # NNN OPN # skip if R2<0    │     │   │          if (R2>0) R1--;        │
RR OON # NNN OPO # R1--            │     │   │          if (R2<0) R1++;        │
RR ONP # NNN OPP # copy R1 to R2   │     │   │          R2 = R1;               │
JP NOO # NNN PNN # jump here ──────┘     │   │      }                          │
EX PPP # NNN PNO # halt and catch fire <─┘   └─────────────────────────────────┘
